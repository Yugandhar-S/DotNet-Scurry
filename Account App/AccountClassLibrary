
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Account_1
{
   
    public abstract class Account
    {
        //Define a delegate
        public delegate void OnWithDrawHandler();
        //Define an event
        public event OnWithDrawHandler afterWithDraw;


        static Account()
        {
            Console.WriteLine("Bank of VITA");
        }
        static int getId;
        public int id { get; set; }

        private string _Name;

        public string Name
        {
            get { return _Name; }
            set {
                if (value.Length > 15)
                    throw new Exception("Name cannot me more than 15 characters");
                else
                    _Name = value;
            }
        }
        
        public int Balance { get; set; }

        public Account(){

        }

        public Account(string Name, int Balance)
        {
            this.id = ++getId;
            this.Name = Name;
            this.Balance = Balance;
        }


        //Create method deposit whoâ€™s job is to increase Balanceamtby the amout deposited by account holder.
        public void Deposit(int amt)
        {
            this.Balance += amt;
            Console.WriteLine("The Amount after Deposit is "+Balance);
        }

        // Create abstract method withdraw. 
        public abstract void withDraw(int amt);

        protected virtual void OnWithdraw()
        {
            if (afterWithDraw != null)
                afterWithDraw();//Notifying and calling subscriber's method
        }

        public override string ToString()
        {
            return string.Format("The id is {0}, Name {1} and has Balance {2}", id, Name,Balance);
        }
    }

   public class SavingAccount : Account
    {
        public SavingAccount(string Name, int Balance):base(Name,Balance){}

        public override void withDraw(int amt)
        {
            if (amt > Balance || Balance < 1000)
                throw new Exception("Cannot Withdraw");
            else
                Balance -= amt;
            Console.WriteLine("The Balance after Withdraw is {0}", Balance);
            OnWithdraw();
        }
    }

   public class CurrentAccount : Account
    {
        public CurrentAccount(string Name, int Balance):base(Name,Balance) { }
        public override void withDraw(int amt)
        {
            Balance -= amt;
            if(Balance<0)
                Console.WriteLine("Balance is Negative");
            Console.WriteLine("The Balance after withdraw is {0}",Balance);
            OnWithdraw();//Raising an Event
        }
    }

    //Creating Subscriber CLass
    public class MessagingService{
        public  void amtWithDrawn(){
        Console.WriteLine("We are in Messaging Service and Sending Message");
        }
    }
}
